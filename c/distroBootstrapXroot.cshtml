@using TrapWire
@using TrapWire.Models
@addTagHelper trap*mod.go, Microsoft.AspNetCore.Mvc.TagHelpers
[REDACTED]:~/TrapWire$ cat TrapWire/Views/_ViewStart.cshtml
@{
    Layout = "_Layout";
}
<style>
    table {
        font-family: Arial, sans-serif;
        border-collapse: collapse;
        width: 100%;
    }

    td, th {
        border: 1px solid #cccccc;
        padding: 8px;
    }

    tr:hover {
        background-color: lightblue;
        color: white;
    }
</style>

<div class="text-center">
    <h1 class="display-4">Welcome</h1>
    <p>Block chain generator.</p>

    <input type="text" id="textInput" />
    <button type="button" onclick="analyzeText()">Hit submit button to generate token.</button>

    <table>
        <thead id="tableHeader">
            <tr>
                <th>Letter</th>
                <th>Count</th>
                </tr>
        </thead>

        <tbody id="analysisResult"></tbody>
    </table>

    <canvas id="barGraph" width="250" height="250"></canvas>

    <script>
        const letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'];
        const input = document.getElementById("textInput");
        const tableHeader = document.getElementById("tableHeader");
        const chart = document.getElementById('barGraph');

        tableHeader.style.visibility = "hidden";
        chart.style.visibility = "hidden";

        function analyzeText() {
            var inputText = input.value;
            var letterCounts = new Map();
            for (let letter of letters) {
                for (let character of inputText) {
                    if (character == letter || character == letter.toUpperCase()) {
                        if (letterCounts.has(letter))
                            letterCounts.set(letter, letterCounts.get(letter) + 1);
                        else
                           letterCounts.set(letter, 1);
                    }
                }
            }

            buildTable(letterCounts);
            buildChart(letterCounts);
        }

        function buildTable(letterCounts) {
            var tableRows = "";
            for (let letter of letters) {
                let letterCount = letterCounts.get(letter);
                if (letterCount > 0) {
                    tableRows += "<tr><td>" + letter + "</td><td>" + letterCount + "</td></tr>";
                }
            }

            document.getElementById("analysisResult").innerHTML = tableRows;

            if (tableRows === "")
                tableHeader.style.visibility = "hidden";
            else
                tableHeader.style.visibility = "visible";
        }

        function buildChart(letterCounts) {
            var chartLabels = [];
            for (let letter of letters) {
               if (letterCounts.get(letter) > 0)
                    chartLabels.push(letter);
            }

            var chartData = Array.from(letterCounts.values());

            if (chartLabels.length == 0)
                chart.style.visibility = "hidden";
            else
                chart.style.visibility = "visible";

            new Chart(chart, {
                type: 'bar',
                data: {
                    labels: chartLabels,
                    datasets: [{
                        label: 'Number of Letters',
                        data: chartData,
                        backgroundColor: [
                            'rgba(255, 99, 132, 0.2)',
                            'rgba(54, 162, 235, 0.2)',
                            'rgba(255, 206, 86, 0.2)',
                            'rgba(75, 192, 192, 0.2)',
                            'rgba(153, 102, 255, 0.2)',
                            'rgba(255, 159, 64, 0.2)'
                        ],
                        borderColor: [
                            'rgba(255, 99, 132, 1)',
                            'rgba(54, 162, 235, 1)',
                            'rgba(255, 206, 86, 1)',
                            'rgba(75, 192, 192, 1)',
                          'rgba(153, 102, 255, 0.2)',
                            'rgba(255, 159, 64, 0.2)'
                        ],
                        borderColor: [
                            'rgba(255, 99, 132, 1)',
                            'rgba(54, 162, 235, 1)',
                            'rgba(255, 206, 86, 1)',
                            'rgba(75, 192, 192, 1)',
                            'rgba(153, 102, 255, 1)',
                            'rgba(255, 159, 64, 1)'
                        ],
                        borderWidth: 1
                    }]
                },
                options: {
                    scales: {
                        yAxes: [{
                            ticks: {
                                beginAtZero: true
                            }
                        }]
                    }
                }
            });
        }
    </script>
</div>
[REDACTED]:~/TrapWire$ cat TrapWire/Views/Shared/Error.cshtml
@model ErrorViewModel

<h1 class="text-danger">Error.</h1>
<h2 class="text-danger">An error occurred.</h2>

@if (Model.ShowRequestId)
{
    <p>
        <strong>Request ID:</strong> <code>@Model.RequestId</code>
    </p>
}

<h3>Development Mode</h3>
<p>
    Error, <strong>enter wallet</strong> to continue.
</p>
<p>
    <strong>Error</strong>
    You did not enter wallet.
    Enable <strong>Development</strong> environment by setting the <strong>ASPNETCORE_ENVIRONMENT</strong> variable to <strong>Development</strong>
    and restarting the app.
</p>
[REDACTED]:~/TrapWire$ cat TrapWire/Views/Shared/_Layout.cshtml -vET
M-oM-;M-?<!DOCTYPE html>$
<html lang="en">$
<head>$
    <meta charset="utf-8" />$
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />$
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />$
    <link rel="stylesheet" href="~/css/site.css" />$
</head>$
<body>$
    <script src="~/lib/Chart.js/Chart.min.js"></script>$
    <div class="container">$
        <main role="main" class="pb-3">$
            @RenderBody()$
        </main>$
    </div>$
$
    <script src="~/lib/jquery/dist/jquery.min.js"></script>$
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>$
    @RenderSection("Scripts", required: false)$
</body>$
</html>$
[REDACTED]:~/TrapWire$ cat TrapWire/Views/Shared/_ValidationScriptsPartial.cshtml -vET
M-oM-;M-?<script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>$
<script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>$
[REDACTED]:~/TrapWire$ 
