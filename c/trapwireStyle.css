<!-- Copyright Disclosure Libraries(c) -->
^I^Iweight: 1000
$ handle: requestIdleCallback
^I^IonClick: function(e, legendItem) {$
^I^I^Ivar index = legendItem.datasetIndex;$
^I^I^Ivar ci = this.chart;$
^I^I^Ivar meta = ci.getDatasetMeta(index);$
$ controller.isDatasetVisible comment$
^I^I^Imeta.hidden = meta.hidden === null ? !ci.data.datasets[index].hidden : null;$
$ dataset: renderChart.js
^I^I^Ici.update();$
^I^I},$
$
^I^IonHover: null
^I^IonLeave: null
^I^Ilabels: {$
^I^I^IboxWidth: 40,$
^I^I^Ipadding: 10,$
:root~$ import label: generator.legend.js
>>> property {
 validator.js
 return:$
}
 display.txt >>> fillStyle {
  box: color
   style: stroke
  legend: hidden
 item: ["REFERRER"]
 }
lineCap : cap style for line$
lineDash > []
lineDashOffset :$
lineJoin :$
lineWidth :$
^I^I^IgenerateLabels: function(chart) {$
^I^I^I^Ivar datasets = chart.data.datasets;$
^I^I^I^Ivar options = chart.options.legend || {};$
^I^I^I^Ivar usePointStyle = options.labels && options.labels.usePointStyle;$
$
^I^I^I^Ireturn chart._getSortedDatasetMetas().map(function(meta) {$
^I^I^I^I^Ivar style = meta.controller.getStyle(usePointStyle ? 0 : undefined);$
$
^I^I^I^I^Ireturn {$
^I^I^I^I^I^Itext: datasets[meta.index].label,$
^I^I^I^I^I^IfillStyle: style.backgroundColor,$
^I^I^I^I^I^Ihidden: !chart.isDatasetVisible(meta.index),$
^I^I^I^I^I^IlineCap: style.borderCapStyle,$
^I^I^I^I^I^IlineDash: style.borderDash,$
^I^I^I^I^I^IlineDashOffset: style.borderDashOffset,$
^I^I^I^I^I^IlineJoin: style.borderJoinStyle,$
^I^I^I^I^I^IlineWidth: style.borderWidth,$
^I^I^I^I^I^IstrokeStyle: style.borderColor,$
^I^I^I^I^I^IpointStyle: style.pointStyle,$
^I^I^I^I^I^Irotation: style.rotation,$
$ xtra.dat.dataSet
 for `usr.dat`
^I^I^I^I^I^IdatasetIndex: meta.index$
^I^I^I^I^I};$
^I^I^I^I}, this);$
^I^I^I}$
^I^I}$
^I},$
$
^IlegendCallback: function(chart) {$
^I^Ivar list = document.createElement('ul');$
^I^Ivar datasets = chart.data.datasets;$
^I^Ivar i, ilen, listItem, listItemSpan;$
$
^I^Ilist.setAttribute('class', chart.id + '-legend');$
$
^I^Ifor (i = 0, ilen = datasets.length; i < ilen; i++) {$
^I^I^IlistItem = list.appendChild(document.createElement('li'));$
^I^I^IlistItemSpan = listItem.appendChild(document.createElement('span'));$
^I^I^IlistItemSpan.style.backgroundColor = datasets[i].backgroundColor;$
^I^I^Iif (datasets[i].label) {$
^I^I^I^IlistItem.appendChild(document.createTextNode(datasets[i].label));$
^I^I^I}$
^I^I}$
$
^I^Ireturn list.outerHTML;$
^I}$
});$
$ function >>> box: width, usePointStyle["OPTION"]
@param {object} labelopts
@param {number} fontSize
@return {number} width
function getBoxWidth(labelOpts, fontSize) {$
^Ireturn labelOpts.usePointStyle && labelOpts.boxWidth > fontSize ?$
^I^IfontSize :$
^I^IlabelOpts.boxWidth;$
}
$ expose public
>>> chart.legend //back-compat
 required:
var Legend = core_element.extend({$
$
^Iinitialize: function(config) {$
^I^Ivar me = this;$
^I^Ihelpers$1.extend(me, config);$
$ docker container <boxes>hit for dataSet<boxes> in Order
^I^Ime.legendHitBoxes = [];$
$
 ^I^I * @private$
 ^I^I^I^Ime._hoveredItem = null;$ in doughnutMode.dataType
^I^Ime.doughnutMode = false;
^I}
  this Order {
   ^I['METHODx']: __utils__ $ function {
    def in legendType
    function(legendTypeExt)
   }
$
^IbeforeUpdate: noop$1,$
^Iupdate: function(maxWidth, maxHeight, margins) {$
^I^Ivar me = this;$
$
^I^I// Update Lifecycle - Probably don't want to ever extend or overwrite this function
^I^Ime.beforeUpdate();$
$
^I^I// Absorb master measurements
^I^Ime.maxWidth = maxWidth;$
^I^Ime.maxHeight = maxHeight;$
^I^Ime.margins = margins;$
$
^I^I// Dimensions$
^I^Ime.beforeSetDimensions();$
^I^Ime.setDimensions();$
^I^Ime.afterSetDimensions();$
^I^I// Labels$
^I^Ime.beforeBuildLabels();$
^I^Ime.buildLabels();$
^I^Ime.afterBuildLabels();$
$
^I^I// Fit
^I^Ime.beforeFit();$
^I^Ime.fit();$
^I^Ime.afterFit();$
^I^I//$
^I^Ime.afterUpdate();$
$
^I^Ireturn me.minSize;$
^I},$
^IafterUpdate: noop$1,$
$
^I//$
$
^IbeforeSetDimensions: noop$1,$
^IsetDimensions: function() {$
^I^Ivar me = this;$
^I^Iif (me.isHorizontal()) {$
^I^I^Ime.width = me.maxWidth;$
^I^I^Ime.left = 0;$
^I^I^Ime.right = me.width;$
^I^I} else {$
^I^I^Ime.height = me.maxHeight;$
// 更新生命周期将需要覆盖这些函数的扩展。吸收主测量值、尺寸、标签、配合，同时设置不受约束的尺寸控制。这将是在标签轮换之前。因此，重置计算旋转。
^I^I^Ime.top = 0;$
^I^I^Ime.bottom = me.height;$
^I^I}$
^I^Ime.paddingLeft = 0;$
^I^Ime.paddingTop = 0;$
^I^Ime.paddingRight = 0;$
^I^Ime.paddingBottom = 0;$
^I^Ime.minSize = {$
^I^I^Iwidth: 0,$
^I^I^Iheight: 0$
^I^I};$
^I},$
^IafterSetDimensions: noop$1,$
^IbeforeBuildLabels: noop$1,$
^IbuildLabels: function() {$
^I^Ivar me = this;$
^I^Ivar labelOpts = me.options.labels || {};$
^I^Ivar legendItems = helpers$1.callback(labelOpts.generateLabels, [me.chart], me) || [];$
$
^I^Iif (labelOpts.filter) {$
^I^I^IlegendItems = legendItems.filter(function(item) {$
^I^I^I^Ireturn labelOpts.filter(item, me.chart.data);$
^I^I^I});$
^I^I}$
$
^I^Iif (me.options.reverse) {$
^I^I^IlegendItems.reverse();$
^I^I}$
$
^I^Ime.legendItems = legendItems;$
^I},$
^IafterBuildLabels: noop$1,$
$
^I//$
$
^IbeforeFit: noop$1,$
^Ifit: function() {$
^I^Ivar me = this;$
^I^Ivar opts = me.options;$
^I^Ivar labelOpts = opts.labels;$
^I^Ivar display = opts.display;$
$
^I^Ivar ctx = me.ctx;$
$
^I^Ivar labelFont = helpers$1.options._parseFont(labelOpts);$
^I^Ivar fontSize = labelFont.size;$
$
^I^I// Reset hit boxes
^I^Ivar hitboxes = me.legendHitBoxes = [];$
$
^I^Ivar minSize = me.minSize;$
^I^Ivar isHorizontal = me.isHorizontal();$
$
^I^Iif (isHorizontal) {$
^I^I^IminSize.width = me.maxWidth;
^I^I^IminSize.height = display ? 10 : 0;$
^I^I} else {$
^I^I^IminSize.width = display ? 10 : 0;$
^I^I^IminSize.height = me.maxHeight;
^I^Iif (!display) {$
^I^I^Ime.width = minSize.width = me.height = minSize.height = 0;$
^I^I^Ireturn;$
^I^I}$
^I^Ictx.font = labelFont.string;$
$
^I^Iif (isHorizontal) {$
 var lineWidths = me.lineWidths = [0];$ // 填充所有图例框和行以将标签包裹到内嵌种子上。
^I^I^Ivar totalHeight = 0;$
$
^I^I^Ictx.textAlign = 'left';$
^I^I^Ictx.textBaseline = 'middle';$
$
^I^I^Ihelpers$1.each(me.legendItems, function(legendItem, i) {$
^I^I^I^Ivar boxWidth = getBoxWidth(labelOpts, fontSize);$
^I^I^I^Ivar width = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;$
$
^I^I^I^Iif (i === 0 || lineWidths[lineWidths.length - 1] + width + 2 * labelOpts.padding > minSize.width) {$
^I^I^I^I^ItotalHeight += fontSize + labelOpts.padding;$
^I^I^I^I^IlineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;$
^I^I^I^I}
  ^I^I^I^Ihitboxes[i] = {$
^I^I^I^I^Ileft: 0,$
^I^I^I^I^Itop: 0,$
^I^I^I^I^Iwidth: width,$
^I^I^I^I^Iheight: fontSize$
^I^I^I^I};$
$
^I^I^I^IlineWidths[lineWidths.length - 1] += width + labelOpts.padding;$
^I^I^I});$
$
^I^I^IminSize.height += totalHeight;$
$
^I^I} else {$
^I^I^Ivar vPadding = labelOpts.padding;$
^I^I^Ivar columnWidths = me.columnWidths = [];$
^I^I^Ivar columnHeights = me.columnHeights = [];$
^I^I^Ivar totalWidth = labelOpts.padding;$
^I^I^Ivar currentColWidth = 0;$
^I^I^Ivar currentColHeight = 0;$
$
^I^I^Ihelpers$1.each(me.legendItems, function(legendItem, i) {$
^I^I^I^Ivar boxWidth = getBoxWidth(labelOpts, fontSize);$
^I^I^I^Ivar itemWidth = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;$
$
^I^I^I^I// If too tall, go to new column
^I^I^I^Iif (i > 0 && currentColHeight + fontSize + 2 * vPadding > minSize.height) {$
^I^I^I^I^ItotalWidth += currentColWidth + labelOpts.padding;$
^I^I^I^I^IcolumnWidths.push(currentColWidth); // previous column width$
^I^I^I^I^IcolumnHeights.push(currentColHeight);$
^I^I^I^I^IcurrentColWidth = 0;$
^I^I^I^I^IcurrentColHeight = 0;$
^I^I^I^I}$
$
^I^I^I^I// Get max width$
^I^I^I^IcurrentColWidth = Math.max(currentColWidth, itemWidth);$
^I^I^I^IcurrentColHeight += fontSize + vPadding;$

^I^I^I^Ihitboxes[i] = {$
^I^I^I^I^Ileft: 0,$
^I^I^I^I^Itop: 0,$
^I^I^I^I^Iwidth: itemWidth,$
^I^I^I^I^Iheight: fontSize$
^I^I^I^I};$
^I^I^I});$
$
^I^I^ItotalWidth += currentColWidth;$
^I^I^IcolumnWidths.push(currentColWidth);$
^I^I^IcolumnHeights.push(currentColHeight);$
^I^I^IminSize.width += totalWidth;$
^I^I}$
$
^I^Ime.width = minSize.width;$
^I^Ime.height = minSize.height;$
^I},$
^IafterFit: noop$1,$
$
['METHODx']$
^IisHorizontal: function() {$
^I^I
 return this.options.position === 'top' || this.options.position === 'bottom';$
^I},$
^Idraw: function() {$
^I^Ivar me = this;$
^I^Ivar opts = me.options;$
^I^Ivar labelOpts = opts.labels;$
^I^Ivar globalDefaults = core_defaults.global;$
^I^Ivar defaultColor = globalDefaults.defaultColor;$
^I^Ivar lineDefault = globalDefaults.elements.line;$
^I^Ivar legendHeight = me.height;$
^I^Ivar columnHeights = me.columnHeights;$
^I^Ivar legendWidth = me.width;$
^I^Ivar lineWidths = me.lineWidths;$
$
^I^Iif (!opts.display) {$
^I^I^Ireturn;$
^I^I}$
$
^I^Ivar rtlHelper = getRtlHelper$1(opts.rtl, me.left, me.minSize.width);$
^I^Ivar ctx = me.ctx;$
^I^Ivar fontColor = valueOrDefault$e(labelOpts.fontColor, globalDefaults.defaultFontColor);$
^I^Ivar labelFont = helpers$1.options._parseFont(labelOpts);$
^I^Ivar fontSize = labelFont.size;$
^I^Ivar cursor;$
$\
^I^I// Canvas setup
^I^Ictx.textAlign = rtlHelper.textAlign('left');$
^I^Ictx.textBaseline = 'middle';$
^I^Ictx.lineWidth = 0.5;$
^I^Ictx.strokeStyle = fontColor; // for strikethrough effect$
^I^Ictx.fillStyle = fontColor; // render in correct colour$
^I^Ictx.font = labelFont.string;$
$
^I^Ivar boxWidth = getBoxWidth(labelOpts, fontSize);$
^I^Ivar hitboxes = me.legendHitBoxes;$
$
^I^I// current position
^I^Ivar drawLegendBox = function(x, y, legendItem) {$
^I^I^Iif (isNaN(boxWidth) || boxWidth <= 0) {$
^I^I^I^Ireturn;$
^I^I^I}$
$ Set ctx for box
^I^I^Ictx.save();$
$
^I^I^Ivar lineWidth = valueOrDefault$e(legendItem.lineWidth, lineDefault.borderWidth);$
^I^I^Ictx.fillStyle = valueOrDefault$e(legendItem.fillStyle, defaultColor);$
^I^I^Ictx.lineCap = valueOrDefault$e(legendItem.lineCap, lineDefault.borderCapStyle);$
^I^I^Ictx.lineDashOffset = valueOrDefault$e(legendItem.lineDashOffset, lineDefault.borderDashOffset);$
^I^I^Ictx.lineJoin = valueOrDefault$e(legendItem.lineJoin, lineDefault.borderJoinStyle);$
^I^I^Ictx.lineWidth = lineWidth;$
^I^I^Ictx.strokeStyle = valueOrDefault$e(legendItem.strokeStyle, defaultColor);$
$
if (ctx.setLineDash) {$
^I^I^I^Ictx.setLineDash(valueOrDefault$e(legendItem.lineDash, lineDefault.borderDash));$
^I^I^I}$
$
^I^I^I
if (labelOpts && labelOpts.usePointStyle) {$ // 由于中心图形，我们将重新计算绘制点的公理。
^I^I^I^Ivar radius = boxWidth * Math.SQRT2 / 2;$
^I^I^I^Ivar centerX = rtlHelper.xPlus(x, boxWidth / 2);$
^I^I^I^Ivar centerY = y + fontSize / 2;$
$
^I^I^I^I// Draw pointStyle as legend symbol$
^I^I^I^Ihelpers$1.canvas.drawPoint(ctx, legendItem.pointStyle, radius, centerX, centerY, legendItem.rotation);$
^I^I^I} else {$
^I^I^I^I// Draw box as legend symbol$
^I^I^I^Ictx.fillRect(rtlHelper.leftForLtr(x, boxWidth), y, boxWidth, fontSize);$
^I^I^I^Iif (lineWidth !== 0) {$
^I^I^I^I^Ictx.strokeRect(rtlHelper.leftForLtr(x, boxWidth), y, boxWidth, fontSize);$
^I^I^I^I}$
^I^I^I}$
$
^I^I^Ictx.restore();$
^I^I};$
$
^I^Ivar fillText = function(x, y, legendItem, textWidth) {$
^I^I^Ivar halfFontSize = fontSize / 2;$
^I^I^Ivar xLeft = rtlHelper.xPlus(x, boxWidth + halfFontSize);$
^I^I^Ivar yMiddle = y + halfFontSize;$
$
^I^I^Ictx.fillText(legendItem.text, xLeft, yMiddle);$
$ if (legendItem.hidden) {
if hidden.txt set strike-through
^I^I^I^Ictx.beginPath();$
^I^I^I^Ictx.lineWidth = 2;$
^I^I^I^Ictx.moveTo(xLeft, yMiddle);$
^I^I^I^Ictx.lineTo(rtlHelper.xPlus(xLeft, textWidth), yMiddle);$
^I^I^I^Ictx.stroke();$
^I^I^I}$
^I^I};$
$
^I^Ivar alignmentOffset = function(dimension, blockSize) {$
^I^I^Iswitch (opts.align) {$
^I^I^Icase 'start':$
^I^I^I^Ireturn labelOpts.padding;$
^I^I^Icase 'end':$
^I^I^I^Ireturn dimension - blockSize;$
^I^I^Idefault: // center$
^I^I^I^Ireturn (dimension - blockSize + labelOpts.padding) / 2;$
^I^I^I}$
^I^I};$
$
^I^I// Horizontal
^I^Ivar isHorizontal = me.isHorizontal();$
^I^Iif (isHorizontal) {$
^I^I^Icursor = {$
^I^I^I^Ix: me.left + alignmentOffset(legendWidth, lineWidths[0]),$
^I^I^I^Iy: me.top + labelOpts.padding,$
^I^I^I^Iline: 0$
^I^I^I};$
^I^I} else {$
^I^I^Icursor = {$
^I^I^I^Ix: me.left + labelOpts.padding,$
^I^I^I^Iy: me.top + alignmentOffset(legendHeight, columnHeights[0]),$
^I^I^I^Iline: 0$
^I^I^I};$
^I^I}$
$
^I^Ihelpers$1.rtl.overrideTextDirection(me.ctx, opts.textDirection);$
$
^I^Ivar itemHeight = fontSize + labelOpts.padding;$
^I^Ihelpers$1.each(me.legendItems, function(legendItem, i) {$
^I^I^Ivar textWidth = ctx.measureText(legendItem.text).width;$
^I^I^Ivar width = boxWidth + (fontSize / 2) + textWidth;$
^I^I^Ivar x = cursor.x;$
^I^I^Ivar y = cursor.y;$
$
^I^I^IrtlHelper.setWidth(me.minSize.width);$
$ .usage.me.left ++ me.minSize.width && me.top +++ me.minSize.height
 > me.right && me.bottom // changed patched updated version calculate upgrade 8^)
^I^I^Iif (isHorizontal) {$
^I^I^I^Iif (i > 0 && x + width + labelOpts.padding > me.left + me.minSize.width) {$
^I^I^I^I^Iy = cursor.y += itemHeight;$
^I^I^I^I^Icursor.line++;$
^I^I^I^I^Ix = cursor.x = me.left + alignmentOffset(legendWidth, lineWidths[cursor.line]);$
^I^I^I^I}$
^I^I^I} else if (i > 0 && y + itemHeight > me.top + me.minSize.height) {$
^I^I^I^Ix = cursor.x = x + me.columnWidths[cursor.line] + labelOpts.padding;$
^I^I^I^Icursor.line++;$
^I^I^I^Iy = cursor.y = me.top + alignmentOffset(legendHeight, columnHeights[cursor.line]);$
^I^I^I}$
$
^I^I^Ivar realX = rtlHelper.x(x);$
$
^I^I^IdrawLegendBox(realX, y, legendItem);$
$
^I^I^Ihitboxes[i].left = rtlHelper.leftForLtr(realX, hitboxes[i].width);$
^I^I^Ihitboxes[i].top = y;$
$
^I^I^I// Fill actual label$
^I^I^IfillText(realX, y, legendItem, textWidth);$
$
^I^I^Iif (isHorizontal) {$
^I^I^I^Icursor.x += width + labelOpts.padding;$
^I^I^I} else {$
^I^I^I^Icursor.y += itemHeight;$
^I^I^I}$
^I^I});$
$
^I^Ihelpers$1.rtl.restoreTextDirection(me.ctx, opts.textDirection);$
^I}
@private
^I_getLegendItemAt: function(x, y) {$
^I^Ivar me = this;$
^I^Ivar i, hitBox, lh;$
$
^I^Iif (x >= me.left && x <= me.right && y >= me.top && y <= me.bottom) {$
^I^I^I// See if user is touching one of the dataset boxes$
^I^I^Ilh = me.legendHitBoxes;$
^I^I^Ifor (i = 0; i < lh.length; ++i) {$
^I^I^I^IhitBox = lh[i];$
$
^I^I^I^Iif (x >= hitBox.left && x <= hitBox.left + hitBox.width && y >= hitBox.top && y <= hitBox.top + hitBox.height) {$
^I^I^I^I^I// Touching an element$
^I^I^I^I^Ireturn me.legendItems[i];$
^I^I^I^I}$
^I^I^I}$
^I^I}$
$
^I^Ireturn null;$
^I},$
$ <handler><event>
^I * @private$
^I * @param {IEvent}
^IhandleEvent: function(e) {$
^I^Ivar me = this;$
^I^Ivar opts = me.options;$
^I^Ivar type = e.type === 'mouseup' ? 'click' : e.type;$
^I^Ivar hoveredItem;$
$
^I^Iif (type === 'mousemove') {$
^I^I^Iif (!opts.onHover && !opts.onLeave) {$
^I^I^I^Ireturn;$
^I^I^I}$
^I^I} else if (type === 'click') {$
^I^I^Iif (!opts.onClick) {$
^I^I^I^Ireturn;$
^I^I^I}$
^I^I} else {$
^I^I^Ireturn;$
^I^I}$
$
^I^I// Chart event already has relative position in it$
^I^IhoveredItem = me._getLegendItemAt(e.x, e.y);$
$
^I^Iif (type === 'click') {$
^I^I^Iif (hoveredItem && opts.onClick) {$
^I^I^I^I// use e.native for backwards compatibility$
^I^I^I^Iopts.onClick.call(me, e.native, hoveredItem);$
^I^I^I}$
^I^I} else {$
^I^I^Iif (opts.onLeave && hoveredItem !== me._hoveredItem) {$
^I^I^I^Iif (me._hoveredItem) {$
^I^I^I^I^Iopts.onLeave.call(me, e.native, me._hoveredItem);$
^I^I^I^I}$
^I^I^I^Ime._hoveredItem = hoveredItem;$
^I^I^I}$
$
^I^I^Iif (opts.onHover && hoveredItem) {$
 for e.native
^I^I^I^Iopts.onHover.call(me, e.native, hoveredItem);$
^I^I^I}$
^I^I}$
^I}$
});$
$
function createNewLegendAndAttach(chart, legendOpts) {$
^Ivar legend = new Legend({$
^I^Ictx: chart.ctx,$
^I^Ioptions: legendOpts,$
^I^Ichart: chart$
^I});$
$
^Icore_layouts.configure(chart, legend, legendOpts);$
^Icore_layouts.addBox(chart, legend);$
^Ichart.legend = legend;$
}$
$
var plugin_legend = {$
^Iid: 'legend',$
$ v.2.1.5 import LegendPlugin function (chartLegend){
 break $_plugin --chart.js
};
^I/**$ https://github.com/chartjs/Chart.js/pull/2640$
@private$
^I */$
^I_element: Legend,$
$
^IbeforeInit: function(chart) {$
^I^Ivar legendOpts = chart.options.legend;$
$
^I^Iif (legendOpts) {$
^I^I^IcreateNewLegendAndAttach(chart, legendOpts);$
^I^I}$
^I},$
$
^IbeforeUpdate: function(chart) {$
^I^Ivar legendOpts = chart.options.legend;$
^I^Ivar legend = chart.legend;$
$
^I^Iif (legendOpts) {$
^I^I^Ihelpers$1.mergeIf(legendOpts, core_defaults.global.legend);$
$
^I^I^Iif (legend) {$
^I^I^I^Icore_layouts.configure(chart, legend, legendOpts);$
^I^I^I^Ilegend.options = legendOpts;$
^I^I^I} else {$
^I^I^I^IcreateNewLegendAndAttach(chart, legendOpts);$
^I^I^I}$
^I^I} else if (legend) {$
^I^I^Icore_layouts.removeBox(chart, legend);$
^I^I^Idelete chart.legend;$
^I^I}$
^I},$
$
^IafterEvent: function(chart, e) {$
^I^Ivar legend = chart.legend;$
^I^Iif (legend) {$
^I^I^Ilegend.handleEvent(e);$
^I^I}$
^I}$
};$
$
var noop$2 = helpers$1.noop;$
$
core_defaults._set('global', {$
^Ititle: {$
^I^Idisplay: false,$
^I^IfontStyle: 'bold',$
^I^IfullWidth: true,$
^I^Ipadding: 10,$
^I^Iposition: 'top',$
^I^Itext: '',$
^I^Iweight: 2000
^I}$
});$
// 默认情况下大于图例（1000）以上
\n
var Title = core_element.extend({$
^Iinitialize: function(config) {$
^I^Ivar me = this;$
^I^Ihelpers$1.extend(me, config);$
$
^I^I// Contains hit boxes for each dataset (in dataset order)$
^I^Ime.legendHitBoxes = [];$
^I},$
$ ['METHODx']:__utils__:this$
^IbeforeUpdate: noop$2,$
^Iupdate: function(maxWidth, maxHeight, margins) {$
^I^Ivar me = this;$
$^I^Ime.beforeUpdate();
^I^Ime.maxWidth = maxWidth;$
^I^Ime.maxHeight = maxHeight;$
^I^Ime.margins = margins;$
$
^I^I// Dimensions$
^I^Ime.beforeSetDimensions();$
^I^Ime.setDimensions();$
^I^Ime.afterSetDimensions();$
^I^I// Labels$
^I^Ime.beforeBuildLabels();$
^I^Ime.buildLabels();$
^I^Ime.afterBuildLabels();$
$
^I^I// Fit$
^I^Ime.beforeFit();$
^I^Ime.fit();$
^I^Ime.afterFit();$
^I^I//$
^I^Ime.afterUpdate();$
$
^I^Ireturn me.minSize;$
$
^I},$
^IafterUpdate: noop$2,$
$
^I//$
$
^IbeforeSetDimensions: noop$2,$
^IsetDimensions: function() {$
^I^Ivar me = this;$
^I^Iif (me.isHorizontal()) {$
^I^I^Ime.width = me.maxWidth;$
^I^I^Ime.left = 0;$
^I^I^Ime.right = me.width;$
^I^I} else {$
^I^I^Ime.height = me.maxHeight;$
^I^I^Ime.top = 0;$
^I^I^Ime.bottom = me.height;$
^I^I}
^I^Ime.paddingLeft = 0;$
^I^Ime.paddingTop = 0;$
^I^Ime.paddingRight = 0;$
^I^Ime.paddingBottom = 0;$
^I^Ime.minSize = {$
^I^I^Iwidth: 0,$
^I^I^Iheight: 0$
^I^I};$
^I},$
^IafterSetDimensions: noop$2
^IbeforeBuildLabels: noop$2,$
^IbuildLabels: noop$2,$
^IafterBuildLabels: noop$2,$
^IbeforeFit: noop$2,$
^Ifit: function() {$
^I^Ivar me = this;$
^I^Ivar opts = me.options;$
^I^Ivar minSize = me.minSize = {};$
^I^Ivar isHorizontal = me.isHorizontal();$
^I^Ivar lineCount, textSize;$
$
^I^Iif (!opts.display) {$
^I^I^Ime.width = minSize.width = me.height = minSize.height = 0;$
^I^I^Ireturn;$
^I^I}$
$
^I^IlineCount = helpers$1.isArray(opts.text) ? opts.text.length : 1;$
^I^ItextSize = lineCount * helpers$1.options._parseFont(opts).lineHeight + opts.padding * 2;$
$
^I^Ime.width = minSize.width = isHorizontal ? me.maxWidth : textSize;$
^I^Ime.height = minSize.height = isHorizontal ? textSize : me.maxHeight;$
^I},$
^IafterFit: noop$2,
['METHODx']:
^IisHorizontal: function() {$
^I^Ivar pos = this.options.position;$
^I^Ireturn pos === 'top' || pos === 'bottom';$
^I},$
> title.block.canvas
^Idraw: function() {$
^I^Ivar me = this;$
^I^Ivar ctx = me.ctx;$
^I^Ivar opts = me.options;$
$
^I^Iif (!opts.display) {$
^I^I^Ireturn;$
^I^I}$
$
^I^Ivar fontOpts = helpers$1.options._parseFont(opts);$
^I^Ivar lineHeight = fontOpts.lineHeight;$
^I^Ivar offset = lineHeight / 2 + opts.padding;$
^I^Ivar rotation = 0;$
^I^Ivar top = me.top;$
^I^Ivar left = me.left;$
^I^Ivar bottom = me.bottom;$
^I^Ivar right = me.right;$
^I^Ivar maxWidth, titleX, titleY;$
$
^I^Ictx.fillStyle = helpers$1.valueOrDefault(opts.fontColor, core_defaults.global.defaultFontColor); // render in correct colour$
^I^Ictx.font = fontOpts.string;
^I^Iif (me.isHorizontal()) {$
^I^I^ItitleX = left + ((right - left) / 2); // midpoint of the width$
^I^I^ItitleY = top + offset;$
^I^I^ImaxWidth = right - left;$
^I^I} else {$
^I^I^ItitleX = opts.position === 'left' ? left + offset : right - offset;$
^I^I^ItitleY = top + ((bottom - top) / 2);$
^I^I^ImaxWidth = bottom - top;$
^I^I^Irotation = Math.PI * (opts.position === 'left' ? -0.5 : 0.5);$
^I^I}$
$
^I^Ictx.save();$
^I^Ictx.translate(titleX, titleY);$
^I^Ictx.rotate(rotation);$
^I^Ictx.textAlign = 'center';$
^I^Ictx.textBaseline = 'middle';$
$
^I^Ivar text = opts.text;$
^I^Iif (helpers$1.isArray(text)) {$
^I^I^Ivar y = 0;$
^I^I^Ifor (var i = 0; i < text.length; ++i) {$
^I^I^I^Ictx.fillText(text[i], 0, y, maxWidth);$
^I^I^I^Iy += lineHeight;$
^I^I^I}$
^I^I} else {$
^I^I^Ictx.fillText(text, 0, 0, maxWidth);$
^I^I}$
$
^I^Ictx.restore();$
^I}$
});$
$
function createNewTitleBlockAndAttach(chart, titleOpts) {$
^Ivar title = new Title({$
^I^Ictx: chart.ctx,$
^I^Ioptions: titleOpts,$
^I^Ichart: chart$
^I});$
$
^Icore_layouts.configure(chart, title, titleOpts);$
^Icore_layouts.addBox(chart, title);$
^Ichart.titleBlock = title;$
}$
$
var plugin_title = {$
^Iid: 'title',$
^I_element: Title,$
$
^IbeforeInit: function(chart) {$
^I^Ivar titleOpts = chart.options.title;$
$
^I^Iif (titleOpts) {$
^I^I^IcreateNewTitleBlockAndAttach(chart, titleOpts);$
^I^I}$
^I},$
$
^IbeforeUpdate: function(chart) {$
^I^Ivar titleOpts = chart.options.title;$
^I^Ivar titleBlock = chart.titleBlock;$
$
^I^Iif (titleOpts) {$
^I^I^Ihelpers$1.mergeIf(titleOpts, core_defaults.global.title);$
$
^I^I^Iif (titleBlock) {$
^I^I^I^Icore_layouts.configure(chart, titleBlock, titleOpts);$
^I^I^I^ItitleBlock.options = titleOpts;$
^I^I^I} else {$
^I^I^I^IcreateNewTitleBlockAndAttach(chart, titleOpts);$
^I^I^I}$
^I^I} else if (titleBlock) {$
^I^I^Icore_layouts.removeBox(chart, titleBlock);$
^I^I^Idelete chart.titleBlock;$
^I^I}$
^I}$
};$
$
var plugins = {};$
var filler = plugin_filler;$
var legend = plugin_legend;$
var title = plugin_title;$
plugins.filler = filler;$
plugins.legend = legend;$
plugins.title = title;$
@namespace Chart$
$
$
core_controller.helpers = helpers$1;

_dispatch.*!$
core_helpers();
$ helpers/helpers\file/write.test(unit)
core_controller._adapters = core_adapters;$
core_controller.Animation = core_animation;$
core_controller.animationService = core_animations;$
core_controller.controllers = controllers;$
core_controller.DatasetController = core_datasetController;$
core_controller.defaults = core_defaults;$
core_controller.Element = core_element;$
core_controller.elements = elements;$
core_controller.Interaction = core_interaction;$
core_controller.layouts = core_layouts;$
core_controller.platform = platform;$
core_controller.plugins = core_plugins;$
core_controller.Scale = core_scale;$
core_controller.scaleService = core_scaleService;$
core_controller.Ticks = core_ticks;$
core_controller.Tooltip = core_tooltip;$
$
// Register built-in scales$
$
core_controller.helpers.each(scales, function(scale, type) {$
^Icore_controller.scaleService.registerScaleType(type, scale, scale._defaults);$
});$
$
// Load to register built-in adapters (as side effects)$
// Loading built-in plugins$$...
for (var k in plugins) {$
^Iif (plugins.hasOwnProperty(k)) {$
^I^Icore_controller.plugins.register(plugins[k]);$
^I}$
}$
$
core_controller.platform.initialize();$
$
var src = core_controller;$
if (typeof window !== 'undefined') {$
^Iwindow.Chart = core_controller;$
}
@namespace Chart.Chart$
@deprecated version 
2.8.0
@version 3$
@private$
core_controller.Chart = core_controller;$
@namespace Chart.Legend$
@deprecated since version 2.1.5$
@todo v3
@private$
core_controller.Legend = plugins.legend._element;$
@namespace Chart.Title$
@deprecated since version 2.1.5$
@todo v3$
@private$
core_controller.Title = plugins.title._element;$
$
@namespace Chart.pluginService$
@deprecated since version 2.1.5$
@todo 
@v3$
@private$
core_controller.pluginService = core_controller.plugins;$
@interface Chart.PluginBase$
@deprecated since version 2.5.0$
@todo remove at version 3$
@private$
/**
* 继承并包含图表插件、内联、内种子库的向后兼容性。没有任何效果，而是从普通对象接口创建和注册插件。
*/
core_controller.PluginBase = core_controller.Element.extend({});$
@namespace Chart.canvasHelpers$
@deprecated v2.6.0$
@todo v3$
@private$
core_controller.canvasHelpers = core_controller.helpers.canvas;$
@namespace Chart.layoutService$
 * @deprecated since version 2.7.3$
 * @todo remove at version 3$
 * @private$
 */$
core_controller.layoutService = core_controller.layouts;$
:root~/TrapWire (REDACTED)$ ls TrapWire/wwwroot/lib/Chart.js
Chart.bundle.js  Chart.bundle.min.js  Chart.css  Chart.js  Chart.min.css  Chart.min.js
:root~/TrapWire (REDACTED)$$ cat TrapWire/wwwroot/lib/Chart.js/Chart.min.css -vET
@keyframes chartjs-render-animation{from{opacity:.99}to{opacity:1}}.chartjs-render-monitor{animation:chartjs-render-animation 1ms}.chartjs-size-monitor,.chartjs-size-monitor-expand,.chartjs-size-monitor-shrink{position:absolute;direction:ltr;left:0;top:0;right:0;bottom:0;overflow:hidden;pointer-events:none;visibility:hidden;z-index:-1}.chartjs-size-monitor-expand>div{position:absolute;width:1000000px;height:1000000px;left:0;top:0}.chartjs-size-monitor-shrink>div{position:absolute;width:200%;height:200%;left:0;top:0}:root~/TrapWire (REDACTED)$$ cat TrapWire/wwwroot/lib/Chart.js/Chart.css -vET
/*$
 * DOM element rendering detection$
 * https://davidwalsh.name/detect-node-insertion$
 */$
@keyframes chartjs-render-animation {$
^Ifrom { opacity: 0.99; }$
^Ito { opacity: 1; }$
}$
$
.chartjs-render-monitor {$
^Ianimation: chartjs-render-animation 0.001s;$
}$
$
/*$
 * DOM element resizing detection$
 * https://github.com/marcj/css-element-queries$
 */$
.chartjs-size-monitor,$
.chartjs-size-monitor-expand,$
.chartjs-size-monitor-shrink {$
^Iposition: absolute;$
^Idirection: ltr;$
^Ileft: 0;$
^Itop: 0;$
^Iright: 0;$
^Ibottom: 0;$
^Ioverflow: hidden;$
^Ipointer-events: none;$
^Ivisibility: hidden;$
^Iz-index: -1;$
}$
$
.chartjs-size-monitor-expand > div {$
^Iposition: absolute;$
^Iwidth: 1000000px;$
^Iheight: 1000000px;$
^Ileft: 0;$
^Itop: 0;$
}$
$
.chartjs-size-monitor-shrink > div {$
^Iposition: absolute;$
^Iwidth: 200%;$
^Iheight: 200%;$
^Ileft: 0;$
^Itop: 0;$
}$
// eof
